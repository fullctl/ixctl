ARG bgpq4_version=1.4
ARG poetry_version=1.1.11
ARG python_version=3.9

ARG virtual_env=/venv
ARG install_to=/srv/service
# ARG build_deps=" \
#     postgresql-dev \
#     g++ \
#     git \
#     libffi-dev \
#    libjpeg-turbo-dev \
#    libtool \
#    linux-headers \
#    make \
#    openssl-dev \
#    curl \
#    git \
#    "
ARG build_deps=" \
    postgresql-dev \
    g++ \
    git \
    libffi-dev \
    libjpeg-turbo-dev \
    libtool \
    linux-headers \
    make \
    openssl-dev \
    curl \
    git \
    "
#ARG run_deps=" \
#    libgcc \
##    postgresql-libs \
#    "
ARG run_deps="libpq"

FROM registry.access.redhat.com/ubi8/ubi-minimal:8.4 as base
# quay.io/centos/centos:stream

ARG install_to
ARG virtual_env

# env to pass to sub images
ENV SERVICE_HOME=$install_to
ENV VIRTUAL_ENV=$virtual_env
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# XXX are not used / set
ENV BUILD_DEPS=$build_deps
ENV RUN_DEPS=$run_deps


# build container
# FROM ghcr.io/fullctl/fullctl-builder-alpine:prep-release as builder
# XXX try minimal
FROM registry.access.redhat.com/ubi8/ubi:8.4 as builder
# FROM ubi8/s2i-core:rhel8.4 as builder

ARG bgpq4_version
# XXX poetry_version

# libpq
ENV POETRY_VERSION=1.1.11

#RUN INSTALL_PKGS="go-toolset" && \
#    yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
#    rpm -V $INSTALL_PKGS && \
#    yum clean all -y
#

#RUN dnf --disableplugin=subscription-manager install -by --nodocs gcc gcc-c++ make cmake patch bzip2 zlib-devel openssl-devel curl-devel pcre2-devel libicu-devel libffi-devel \
#    && dnf --disableplugin=subscription-manager config-manager --add-repo ${RHEL_REPOSITORY} \
#    && dnf --disableplugin=subscription-manager --enablerepo=rhel-8-for-x86_64-* install -yb --nodocs readline-devel \
#    && mkdir -p ${BUILD_DIR}


WORKDIR /build
#RUN dnf --disableplugin=subscription-manager install -by --nodocs gcc gcc-c++ make cmake patch bzip2 zlib-devel openssl-devel curl-devel pcre2-devel libicu-devel libffi-devel \

RUN rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
RUN yum install -y gcc git bgpq4 python39-devel

# Use Pip to install Poetry
RUN pip3 install "poetry==$POETRY_VERSION"

# Create a VENV
RUN python3 -m venv "$VIRTUAL_ENV"

# poetry install
COPY pyproject.toml poetry.lock ./
RUN poetry install --no-root


#### final image

FROM base as final

ARG run_deps
ARG uid=5002
ARG user=fullctl


# extra settings file if needed
# TODO keep in until final production deploy
ARG COPY_SETTINGS_FILE=src/ixctl/settings/dev.py

# add dependencies
#RUN dnf install -by $run_deps
RUN microdnf -y install --nodocs $run_deps && \
    microdnf clean all

# XXX RUN useradd -m -u $uid $user



COPY --from=builder "$VIRTUAL_ENV" "$VIRTUAL_ENV"
# XXX COPY --from=builder /usr/bin/bgpq4 /usr/bin/bgpq4

WORKDIR $SERVICE_HOME
RUN mkdir -p etc locale media static
COPY Ctl/VERSION etc/
COPY docs/ docs

# XXX
# COPY ars_config/ /root/arouteserver

#RUN Ctl/docker/manage.sh collectstatic --no-input

RUN chown -R $uid:$uid locale media

#### entry point from final image, not tester
FROM final

ARG user
ARG uid

#  XXX ARG USER=fullctl

COPY src/ main/
COPY Ctl/docker/entrypoint.sh .

RUN ln -s $SERVICE_HOME/entrypoint.sh /entrypoint
RUN ln -s /venv $SERVICE_HOME/venv

COPY Ctl/docker/django-uwsgi.ini etc/
COPY Ctl/docker/manage.sh /usr/bin/manage


#ENV UWSGI_SOCKET=127.0.0.1:6002

USER $uid

ENTRYPOINT ["/entrypoint"]
CMD ["runserver"]
